#lang racket
(define a 4)
(define b 4)
(define c 4)
(define (square x) (* x x))
(define (sum-of-squares x y) (+ (square x) (square y)))
(cond
    ((and (> a b) (> b c)) (sum-of-squares a b))
    ((and (> b a) (> a c)) (sum-of-squares b a))
    ((and (> c a) (> a b)) (sum-of-squares c a))
    ((and (> c a) (> a b)) (sum-of-squares c a))
    ((and (> a b) (< b c)) (sum-of-squares a c))
    ((and (> b a) (< a c)) (sum-of-squares b c))
    ((and (> c a) (< a b)) (sum-of-squares c b))
    ((and (= a b) (= b c)) (sum-of-squares a b))
    ((and (> a b) (= b c)) (sum-of-squares a b))
    ((and (> c a) (= a b)) (sum-of-squares c b))
    ((and (> a c) (= a b)) (sum-of-squares a b))
    ((and (> b c) (= a c)) (sum-of-squares b c))
)
