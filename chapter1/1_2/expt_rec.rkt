;b^n
;b^n = b * b^(n-1)

#lang racket
(define (expt b n)
    (if (= n 0) 1
    (* b (expt b (- n 1)))))

(expt 2 4) ;->16
;(expt 2 4)
;(expt 2 4) -> 2 * (expt 2 3)
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2)))
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1))))
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1)))) -> (2 * (2 * (2 * (2 * (expt 2 0)))))
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1)))) -> (2 * (2 * (2 * (2 * 1))))
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1)))) -> (2 * (2 * (2 * 2)))
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1)))) -> (2 * (2 * 4))
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1)))) -> (2 * 8)
;(expt 2 4) -> 2 * (expt 2 3) -> (2 * (2 * (expt 2 2))) -> (2 * (2 * (2 * (expt 2 1)))) -> 16
; С увеличением степени n - рекурсия линейно возрастает, то есть порядок роста O(n).
; Память затрачивается пропорционально порядку роста, т.е. O(n). Т.е. чем больше степень теб больше необходимо выделить памяти


